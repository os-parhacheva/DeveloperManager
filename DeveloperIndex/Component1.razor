@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Developer.Domain
@using System.Collections.Generic

<PageTitle>Модули</PageTitle>

<br />
<button class="btn btn-primary" @onclick="() => OpenAddDialog()">Добавить модуль</button>
<br />
@if (AddDialogOpen)
{
    <AddModel OnClose="@OnAddDialogClose"></AddModel>
}

            
           


@if (lessons.Count == 0)
{
    <p>Модули отсутствуют.</p>
}
else
{
    <table class="table table-hover">
      <thead>
        <tr>
          <th scope="col">Название</th>
          <th scope="col">Номер модуля</th>
          <th scope="col">Тип модуля</th>          
          <th scope="col">Коэффициент сложности</th>
          <th scope="col">&nbsp;</th>

        </tr>
      </thead>
      <tbody> 
        @foreach (var lesson in lessons)
        {
            <tr>
              <td >   @lesson.Name </td>
              <td>@lesson.LessonNumber</td>
              <td>@ToLessonType(lesson)</td>
              <td>@lesson.LaborIntensity</td>

              <td><a href="@($"edit/{lesson.Id}")" style="text-decoration: none">Изменить</a> |
              
              <a @onclick="@(() => Delete(lesson.Id))" style="color: red; cursor:pointer">Удалить</a></td>
            </tr>   
        }
      </tbody>
    </table> 

}



@code {

    public List<Lesson> lessons = new List<Lesson>();


    protected override async Task OnInitializedAsync()
    {
        lessons = await Http.GetFromJsonAsync<List<Lesson>>("https://localhost:7027/api/Lesson");
    }

    public string ToLessonType(Lesson lesson)
    {
        switch ((int)lesson.LessonType)
        {
            case 10:  return "Учебный модуль в рамках дисциплины";
            case 20:  return "Лабораторно-практический модуль";
            case 30:  return "Лабораторная работа";
            case 40:  return "Практическая работа";
            case 50:  return "Коллоквиум";
            case 60:  return "Курсовой проект";
            case 70:  return "Курсовая работа";
            case 80:  return "Контрольная работа";
            default:  return "Тип не выбран";
        } 
    }

      public async Task<List<Lesson>> Delete(Guid id)
    {
        var result = await Http.DeleteAsync($"https://localhost:7027/api/Lesson/{id}");
        if (result.IsSuccessStatusCode)
        {
            lessons = await Http.GetFromJsonAsync<List<Lesson>>("https://localhost:7027/api/Lesson");
        }
        return lessons;
    }
   
     public bool AddDialogOpen { get; set; }
     private void OnAddDialogClose(bool accepted)
     {
        AddDialogOpen = false;
        StateHasChanged();
     }
     private void OpenAddDialog()
     {
        AddDialogOpen = true;
        StateHasChanged();
     }


   
     

}