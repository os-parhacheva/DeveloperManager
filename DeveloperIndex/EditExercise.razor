@using Developer.Domain
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (AddOptionDialogOpen)
{
    <AddOption OnClose="@OnAddDialogClose" Id="@Id" blockId="@blockId" exerciseId="@exerciseId" ></AddOption>
}


<div style=" display:flex; align-items: center; justify-content: center;">
    <EditForm class="form-signin" OnSubmit="HandleValidSubmit" Model="exercise" style="width:650px">
        <div class="modal-body">                    
                   <div class="align-content-center">
                       <label for="name">Номер задания</label>
                   </div>
                   <InputNumber id="name" type="int" @bind-Value="exercise.ExerciseNumber" class="form-control"/>

                   <div class="align-content-center">
                       <label for="name">Коэффициент сложности</label>
                   </div>
                   <InputNumber id="name" type="int" @bind-Value="exercise.DifficultyCoefficient" class="form-control"/>

                   <div class="mb-3">
                        <label for="name">Тип заданий</label>
                         <InputSelect id="type" type="text" @bind-Value="exercise.Type" class="form-select">
                    <option value="@Exercise.ExerciseType.Group">Групповые задания</option>
                         <option value="@Exercise.ExerciseType.IndividualExercise">Индивидуальные задания</option>
                         <option value="@Exercise.ExerciseType.Test">Тест</option>
                         </InputSelect>                        
                   </div>

                    <div class="mb-3">
                        <label for="name">Контент</label>
                         <InputSelect id="type" type="text" @bind-Value="exercise.Content.ContentType" class="form-select"> 
                         <option value="@ContentType.Book">Книга</option>
                         <option value="@ContentType.Document">Документ</option>
                         <option value="@ContentType.File">Файл</option>
                         <option value="@ContentType.Image">Изображение</option>
                         <option value="@ContentType.Video">Видео</option>
                         </InputSelect>                        
                    </div>

                    
                     <div class="mb-3">
                         <label for="name">Название теста</label>
                         <InputText id="name" type="text" @bind-Value="exercise.Test.Name" class="form-control" />
                     </div>
                     <div class="mb-3">
                          <label for="name">Ссылка на тест</label>
                          <InputText id="name" type="text" @bind-Value="exercise.Test.ServiceUrl" class="form-control" />
                     </div>
                   

                    @foreach(var op in exercise.Options)
                    {
                        <div class="align-content-center">
                            <label for="name">Номер опции</label>
                        </div>
                        <InputNumber id="name" type="int" @bind-Value="op.OptionNumber" class="form-control"/>
                        
                        <div class="mb-3">
                            <label for="name">Тип опции</label>
                            <InputSelect id="type" type="text" @bind-Value="op.Type" class="form-select"> 
                                <option value="@OptionType.FillForm">Форма ввода</option>
                                <option value="@OptionType.LoadFile">Загрузка файла</option>
                                <option value="@OptionType.LoadImg">Загрузка изображения</option>
                                <option value="@OptionType.LoadVideo">Загрузка видео</option>                                
                            </InputSelect>                        
                        </div>

                        <div class="mb-3">
                            <label for="name">Формат опции</label>
                            <InputSelect id="type" type="text" @bind-Value="op.Format" class="form-select"> 
                                <option value="@FormatType.Nothing">Ничего</option>
                                <option value="@FormatType.InputForm">Форма ввода</option>
                                <option value="@FormatType.OneFilePerOption">Загрузка одного файла</option>
                                <option value="@FormatType.MultipleFilesPerOption">Загрузка одного и более файлов</option>                                                              
                            </InputSelect>                        
                        </div>

                        <div class="mb-3">
                            <label for="name">Описание</label>
                            <InputText id="name" type="text" @bind-Value="op.Description" class="form-control" />
                        </div>
                    }


        </div>

         @if(flag==true)
            {
                <div class="alert alert-success" role="alert" >
                   Изменения сохранены!
                </div>
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-success" @onclick="OpenAddBlockDialog">
                   Добавить опцию
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="@(() => DeleteExercise(exercise))">
                   Удалить
                </button>                
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </div>

    </EditForm>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public Guid blockId { get; set; }
    [Parameter]
    public Guid exerciseId { get; set; }

    public Lesson lesson = new Lesson();
    public Exercise exercise = new Exercise();
    public ExerciseBlock exerciseBlock=new ExerciseBlock();

    public bool flag = false;

    protected async override Task OnParametersSetAsync()
    {
        lesson = await Http.GetFromJsonAsync<Lesson>($"https://localhost:7027/api/Lesson/{Id}");

        exerciseBlock = lesson.ExerciseBlocks.FirstOrDefault(p => p.Id == blockId);
        exercise = exerciseBlock.Exercises.FirstOrDefault(p => p.Id == exerciseId);
    }

    protected async Task HandleValidSubmit()
    {
        flag = false;
        var res = await Http.PutAsJsonAsync($"https://localhost:7027/api/Lesson/{Id}", lesson);
        if (res.IsSuccessStatusCode)
        {
            flag = true;
        }
    }

    public async Task DeleteExercise(Exercise ex)
    {
       lesson.ExerciseBlocks.FirstOrDefault(p => p.Id == blockId).Exercises.Remove(ex);
        
       var res = await Http.PutAsJsonAsync($"https://localhost:7027/api/Lesson/{Id}", lesson);        
       if (res.IsSuccessStatusCode)
       {
           NavigationManager.NavigateTo($"/edit/{Id}", true);
       }
    }

    public bool AddOptionDialogOpen { get; set; }

    private void OnAddDialogClose(bool accepted)
    {
        AddOptionDialogOpen = false;
        StateHasChanged();
    }
    private void OpenAddBlockDialog()
    {
        AddOptionDialogOpen = true;            
        StateHasChanged();        
    }


}
